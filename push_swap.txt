# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    push_swap.txt                                      :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: adrocha <adrocha@student.42.fr>            +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/07/26 17:25:10 by adrocha           #+#    #+#              #
#    Updated: 2025/07/26 20:08:11 by adrocha          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

push_swap/
├── Makefile
├── push_swap.h        # 🧠 Header com struct e funções
├── main.c             # 🎯 main() e chamada do parsing
├── parsing.c          # 🔍 parsing dos argumentos
├── utils.c            # 🔧 funções auxiliares (ft_atoi, ft_split, etc)

------------------------------------------------------

#ifndef PUSH_SWAP_H
# define PUSH_SWAP_H

# include <stdlib.h>
# include <unistd.h>
# include <limits.h>

// ===== ESTRUTURA =====
typedef struct s_node
{
    int             value;
    int             index;  // Para usar depois no radix sort
    struct s_node  *next;
} t_node;

// ===== PARSING =====
int		parse_arguments(t_node **stack, int argc, char **argv);
int		is_valid_number(char *str);
int		is_int_range(char *str);
int		add_to_stack(t_node **stack, int value);
int		has_duplicates(t_node *stack);
char	**join_and_split(char **argv, int count);
void	free_args(char **args);

// ===== UTILS =====
int		ft_isdigit(int c);
long	ft_atol(const char *str);
int		ft_atoi(const char *str);
char	*ft_strdup(const char *s);
char	*ft_strjoin(const char *s1, const char *s2);
char	**ft_split(const char *s, char c);
int		ft_word_count(const char *s, char c);
char	*ft_substr(const char *s, int start, int len);

#endif

--------------------------------------------------------

main.c

#include "push_swap.h"
#include <stdio.h> // apenas para print_stack de teste

void	print_stack(t_node *stack)
{
	while (stack)
	{
		printf("%d\n", stack->value);
		stack = stack->next;
	}
}

int	main(int argc, char **argv)
{
	t_node *stack_a = NULL;

	if (argc < 2)
		return (0);
	if (!parse_arguments(&stack_a, argc, argv))
	{
		write(2, "Error\n", 6);
		return (1);
	}
	print_stack(stack_a); // 🔎 DEBUG: mostra os valores lidos
	return (0);
}

---------------------------------------------------

parsing.c

#include "push_swap.h"

int	is_valid_number(char *str)
{
	int i = 0;

	if (str[i] == '-' || str[i] == '+')
		i++;
	if (!str[i])
		return (0);
	while (str[i])
	{
		if (!ft_isdigit(str[i]))
			return (0);
		i++;
	}
	return (1);
}

int	is_int_range(char *str)
{
	long n = ft_atol(str);
	return (n >= INT_MIN && n <= INT_MAX);
}

int	has_duplicates(t_node *stack)
{
	t_node *curr = stack;
	t_node *check;

	while (curr)
	{
		check = curr->next;
		while (check)
		{
			if (curr->value == check->value)
				return (1);
			check = check->next;
		}
		curr = curr->next;
	}
	return (0);
}

int	add_to_stack(t_node **stack, int value)
{
	t_node *new = malloc(sizeof(t_node));
	t_node *last;

	if (!new)
		return (0);
	new->value = value;
	new->index = -1;
	new->next = NULL;
	if (!*stack)
		*stack = new;
	else
	{
		last = *stack;
		while (last->next)
			last = last->next;
		last->next = new;
	}
	return (1);
}

char	**join_and_split(char **argv, int count)
{
	char *joined = ft_strdup("");
	char *tmp;
	char **result;
	int i = 0;

	while (i < count)
	{
		tmp = ft_strjoin(joined, " ");
		free(joined);
		joined = ft_strjoin(tmp, argv[i]);
		free(tmp);
		i++;
	}
	result = ft_split(joined, ' ');
	free(joined);
	return (result);
}

void	free_args(char **args)
{
	int i = 0;
	while (args && args[i])
		free(args[i++]);
	free(args);
}

int	parse_arguments(t_node **stack, int argc, char **argv)
{
	char **args = join_and_split(argv + 1, argc - 1);
	int i = 0;

	if (!args)
		return (0);
	while (args[i])
	{
		if (!is_valid_number(args[i]) || !is_int_range(args[i]))
			return (free_args(args), 0);
		if (!add_to_stack(stack, ft_atoi(args[i])))
			return (free_args(args), 0);
		i++;
	}
	if (has_duplicates(*stack))
		return (free_args(args), 0);
	free_args(args);
	return (1);
}

----------------------------------------------------

utils.c

#include "push_swap.h"
#include <string.h> // para strlen

int	ft_isdigit(int c)
{
	return (c >= '0' && c <= '9');
}

long	ft_atol(const char *str)
{
	long result = 0;
	int sign = 1;

	while (*str == ' ' || (*str >= 9 && *str <= 13))
		str++;
	if (*str == '-' || *str == '+')
		if (*str++ == '-')
			sign = -1;
	while (*str && ft_isdigit(*str))
		result = result * 10 + (*str++ - '0');
	return (result * sign);
}

int	ft_atoi(const char *str)
{
	return ((int)ft_atol(str));
}

char	*ft_strdup(const char *s)
{
	char *dup;
	int i = 0;
	int len = strlen(s);

	dup = malloc(len + 1);
	if (!dup)
		return (NULL);
	while (s[i])
	{
		dup[i] = s[i];
		i++;
	}
	dup[i] = '\0';
	return (dup);
}

char	*ft_strjoin(const char *s1, const char *s2)
{
	char *str;
	int i = 0, j = 0;

	if (!s1 || !s2)
		return (NULL);
	str = malloc(strlen(s1) + strlen(s2) + 1);
	if (!str)
		return (NULL);
	while (s1[i])
	{
		str[i] = s1[i];
		i++;
	}
	while (s2[j])
		str[i++] = s2[j++];
	str[i] = '\0';
	return (str);
}

int	ft_word_count(const char *s, char c)
{
	int count = 0, in_word = 0;

	while (*s)
	{
		if (*s != c && !in_word)
		{
			in_word = 1;
			count++;
		}
		else if (*s == c)
			in_word = 0;
		s++;
	}
	return (count);
}

char	*ft_substr(const char *s, int start, int len)
{
	char *sub;
	int i = 0;

	if (!s || start >= (int)strlen(s))
		return (ft_strdup(""));
	if ((int)strlen(s + start) < len)
		len = strlen(s + start);
	sub = malloc(len + 1);
	if (!sub)
		return (NULL);
	while (i < len)
	{
		sub[i] = s[start + i];
		i++;
	}
	sub[i] = '\0';
	return (sub);
}

char	**ft_split(const char *s, char c)
{
	int i = 0, start = 0, end = 0, wc = ft_word_count(s, c);
	char **arr = malloc(sizeof(char *) * (wc + 1));

	if (!arr)
		return (NULL);
	while (s[end])
	{
		while (s[end] == c)
			end++;
		start = end;
		while (s[end] && s[end] != c)
			end++;
		if (end > start)
			arr[i++] = ft_substr(s, start, end - start);
	}
	arr[i] = NULL;
	return (arr);
}

------------------------------------------------------

Makefile 

NAME = push_swap
CC = gcc
CFLAGS = -Wall -Wextra -Werror
SRC = main.c parsing.c utils.c
HEADER = push_swap.h

all: $(NAME)

$(NAME): $(SRC) $(HEADER)
	$(CC) $(CFLAGS) $(SRC) -o $(NAME)

clean:
	rm -f $(NAME)

re: clean all

 -------------------------------------------------------------

 